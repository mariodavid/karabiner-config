const X = [
  "left_control",
  "left_shift",
  "left_option",
  "left_command",
  "right_control",
  "right_shift",
  "right_option",
  "right_command",
  "fn"
], he = [
  ...X,
  "caps_lock"
], me = [
  "return_or_enter",
  "escape",
  "delete_or_backspace",
  "delete_forward",
  "tab",
  "spacebar",
  "hyphen",
  "equal_sign",
  "open_bracket",
  "close_bracket",
  "backslash",
  "non_us_pound",
  "semicolon",
  "quote",
  "grave_accent_and_tilde",
  "comma",
  "period",
  "slash",
  "non_us_backslash"
], ye = [
  "up_arrow",
  "down_arrow",
  "left_arrow",
  "right_arrow",
  "page_up",
  "page_down",
  "home",
  "end"
], be = [
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z"
], ge = [
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "0"
], ke = [
  "f1",
  "f2",
  "f3",
  "f4",
  "f5",
  "f6",
  "f7",
  "f8",
  "f9",
  "f10",
  "f11",
  "f12",
  "f13",
  "f14",
  "f15",
  "f16",
  "f17",
  "f18",
  "f19",
  "f20"
], we = [
  "keypad_num_lock",
  "keypad_slash",
  "keypad_asterisk",
  "keypad_hyphen",
  "keypad_plus",
  "keypad_enter",
  "keypad_1",
  "keypad_2",
  "keypad_3",
  "keypad_4",
  "keypad_5",
  "keypad_6",
  "keypad_7",
  "keypad_8",
  "keypad_9",
  "keypad_0",
  "keypad_period",
  "keypad_equal_sign",
  "keypad_comma"
], ve = [
  "print_screen",
  "scroll_lock",
  "pause",
  "insert",
  "application",
  "help",
  "power"
], Me = [
  "international1",
  "international3",
  "lang1",
  "lang2"
], Ce = ["japanese_eisuu", "japanese_kana"], Ae = [
  "volume_down",
  // equal to `volume_decrement`
  "volume_up",
  // equal to `volume_increment`
  "mute",
  "volume_decrement",
  "volume_increment"
], F = [
  // Function keys
  "f21",
  "f22",
  "f23",
  "f24",
  // Keys in pc keyboards
  "execute",
  "menu",
  "select",
  "stop",
  "again",
  "undo",
  "cut",
  "copy",
  "paste",
  "find",
  // International keys
  "international2",
  "international4",
  "international5",
  "international6",
  "international7",
  "international8",
  "international9",
  "lang3",
  "lang4",
  "lang5",
  "lang6",
  "lang7",
  "lang8",
  "lang9",
  // Japanese
  "japanese_pc_nfer",
  // PCキーボードの無変換キー
  "japanese_pc_xfer",
  // PCキーボードの変換キー
  "japanese_pc_katakana",
  // PCキーボードのかなキー
  // Others
  "keypad_equal_sign_as400",
  "locking_caps_lock",
  "locking_num_lock",
  "locking_scroll_lock",
  "alternate_erase",
  "sys_req_or_attention",
  "cancel",
  "clear",
  "prior",
  "return",
  // rarely used return (HID usage 0x9e)
  "separator",
  "out",
  "oper",
  "clear_or_again",
  "cr_sel_or_props",
  "ex_sel"
], I = [
  // Disable this key
  "vk_none",
  // Others
  "vk_consumer_brightness_down",
  // equal to `display_brightness_decrement`
  "vk_consumer_brightness_up",
  // equal to `display_brightness_increment`
  "vk_mission_control",
  // equal to `mission_control`
  "vk_launchpad",
  // equal to `launchpad`
  "vk_dashboard",
  // equal to `dashboard`
  "vk_consumer_illumination_down",
  // equal to `illumination_decrement`
  "vk_consumer_illumination_up",
  // equal to `illumination_increment`
  "vk_consumer_previous",
  // equal to `rewind`
  "vk_consumer_play",
  // equal to `play`
  "vk_consumer_next",
  // equal to `fast_forward`
  "display_brightness_decrement",
  "display_brightness_increment",
  "rewind",
  "play_or_pause",
  "fastforward",
  "apple_display_brightness_decrement",
  "apple_display_brightness_increment",
  "dashboard",
  "launchpad",
  "mission_control",
  "apple_top_case_display_brightness_decrement",
  "apple_top_case_display_brightness_increment",
  "illumination_decrement",
  "illumination_increment"
], kt = [
  // Media controls
  "rewind",
  "play_or_pause",
  "fast_forward",
  "mute",
  "volume_decrement",
  "volume_increment",
  "al_terminal_lock_or_screensaver",
  // Lock key on Magic Keyboard without Touch ID
  "eject",
  "scan_previous_track",
  "scan_next_track",
  // Application Launch keys
  "al_word_processor",
  "al_text_editor",
  "al_spreadsheet",
  "al_presentation_app",
  "al_email_reader",
  "al_calculator",
  "al_local_machine_browser",
  "al_internet_browser",
  "al_dictionary",
  // Others
  "fastforward"
], wt = [
  // Media controls
  "menu",
  // Touch ID on Magic Keyboard
  // Application Launch keys
  "al_graphics_editor",
  "al_database_app",
  "al_newsreader",
  "al_voicemail",
  "al_contacts_or_address_book",
  "al_Calendar_Or_Schedule",
  "al_task_or_project_manager",
  "al_log_or_journal_or_timecard",
  "al_checkbook_or_finance",
  "al_a_or_v_capture_or_playback",
  "al_lan_or_wan_browser",
  "al_remote_networking_or_isp_connect",
  "al_network_conference",
  "al_network_chat",
  "al_telephony_or_dialer",
  "al_logon",
  "al_logoff",
  "al_logon_or_logoff",
  "al_control_panel",
  "al_command_line_processor_or_run",
  "al_process_or_task_manager",
  "al_select_task_or_application",
  "al_next_task_or_application",
  "al_previous_task_or_application",
  "al_preemptive_halt_task_or_application",
  "al_integrated_help_center",
  "al_documents",
  "al_thesaurus",
  "al_desktop",
  "al_spell_check",
  "al_grammer_check",
  "al_wireless_status",
  "al_keyboard_layout",
  "al_virus_protection",
  "al_encryption",
  "al_screen_saver",
  "al_alarms",
  "al_clock",
  "al_file_browser",
  "al_power_status",
  "al_image_browser",
  "al_audio_browser",
  "al_movie_browser",
  "al_digital_rights_manager",
  "al_digital_wallet",
  "al_instant_messaging",
  "al_oem_feature_browser",
  "al_oem_help",
  "al_online_community",
  "al_entertainment_content_browser",
  "al_online_shopping_browswer",
  "al_smart_card_information_or_help",
  "al_market_monitor_or_finance_browser",
  "al_customized_corporate_news_browser",
  "al_online_activity_browswer",
  "al_research_or_search_browswer",
  "al_audio_player",
  "al_message_status",
  "al_contact_sync",
  "al_navigation",
  "al_contextaware_desktop_assistant",
  // Generic GUI application Control keys
  "ac_home",
  "ac_back",
  "ac_forward",
  "ac_refresh",
  "ac_bookmarks",
  // Remote control buttons
  "menu_pick",
  "menu_up",
  "menu_down",
  "menu_left",
  "menu_right",
  "menu_escape",
  "menu_value_increase",
  "menu_value_decrease",
  "data_on_screen",
  "closed_caption",
  "closed_caption_select",
  "vcr_or_tv",
  "broadcast_mode",
  "snapshot",
  "still",
  "picture_in_picture_toggle",
  "picture_in_picture_swap",
  "red_menu_button",
  "green_menu_button",
  "blue_menu_button",
  "yellow_menu_button",
  "aspect",
  "three_dimensional_mode_select"
], vt = [
  // Media controls
  "display_brightness_decrement",
  "display_brightness_increment",
  "dictation"
], Mt = [
  "button1",
  "button2",
  "button3",
  "button4",
  "button5",
  "button6",
  "button7",
  "button8",
  "button9",
  "button10",
  "button11",
  "button12",
  "button13",
  "button14",
  "button15",
  "button16",
  "button17",
  "button18",
  "button19",
  "button20",
  "button21",
  "button22",
  "button23",
  "button24",
  "button25",
  "button26",
  "button27",
  "button28",
  "button29",
  "button30",
  "button31",
  "button32"
], N = {
  "⌘": "command",
  "⌥": "option",
  "⌃": "control",
  "⇧": "shift",
  "⇪": "caps_lock"
}, ae = {
  "↑": "up_arrow",
  "↓": "down_arrow",
  "←": "left_arrow",
  "→": "right_arrow",
  "⇞": "page_up",
  "⇟": "page_down",
  "↖︎": "home",
  "↘︎": "end"
}, le = {
  "⏎": "return_or_enter",
  "⎋": "escape",
  "⌫": "delete_or_backspace",
  "⌦": "delete_forward",
  "⇥": "tab",
  "␣": "spacebar",
  "-": "hyphen",
  "=": "equal_sign",
  "[": "open_bracket",
  "]": "close_bracket",
  "\\": "backslash",
  ";": "semicolon",
  "'": "quote",
  "`": "grave_accent_and_tilde",
  ",": "comma",
  ".": "period",
  "/": "slash"
}, ee = {
  ...ae,
  ...le,
  "⇪": N["⇪"]
}, Ee = [
  ...X,
  ...he,
  ...me,
  ...ye,
  ...be,
  ...ge,
  ...ke,
  ...we,
  ...ve,
  ...Me,
  ...Ce,
  ...Ae,
  ...F,
  ...I
];
function A(t, e, i) {
  if (typeof t == "number") return `${t}`;
  if (t.length > 1 && H(t)) {
    const n = Y(t);
    if ((n == null ? void 0 : n.length) === 1)
      return n[0];
    throw new Error(`Invalid key ${t}`);
  }
  if (t in ee)
    return ee[t];
  const o = t;
  if (!Ee.includes(o))
    throw new Error(`${o} is not valid key_code`);
  if (e != null && e.includes(o))
    throw new Error(`Key ${t} cannot be used ${i || "here"}`);
  return o;
}
const Ke = {
  Meh: ["option", "control", "shift"],
  Hyper: ["command", "option", "control", "shift"],
  SuperHyper: ["command", "option", "control", "shift", "fn"]
}, te = {
  "⌘⇧": ["command", "shift"],
  "⌥⇧": ["option", "shift"],
  "⌃⇧": ["control", "shift"],
  "⌘⌥": ["command", "option"],
  "⌘⌃": ["command", "control"],
  "⌥⌃": ["option", "control"],
  "⌘⌥⌃": ["command", "option", "control"],
  "⌘⌥⇧": ["command", "option", "shift"],
  "⌘⌃⇧": ["command", "control", "shift"],
  "⌥⌃⇧": ["option", "control", "shift"],
  "⌘⌥⌃⇧": ["command", "option", "control", "shift"],
  ...Ke
};
function E(t) {
  if (!t) return;
  if (typeof t == "string")
    return H(t) ? Y(t) : t in N ? [N[t]] : t in te ? te[t] : [t];
  if (Array.isArray(t))
    return Te(t) ? Oe(t) : t.map(Se);
  let e;
  "left" in t ? e = T("left", t.left) : "l" in t && (e = T("left", t.l));
  let i;
  if ("right" in t ? i = T("right", t.right) : "r" in t && (i = T("right", t.r)), !(!(e != null && e.length) && !(i != null && i.length)))
    return [...e || [], ...i || []];
}
const ue = /^(left|l|<|‹)([⌘⌥⌃⇧]*)$/, ce = /^(right|r|>|›)([⌘⌥⌃⇧]*)$/;
function L(t, e) {
  if (!(!t && !e))
    return {
      mandatory: ie(t),
      optional: ie(e)
    };
}
function ie(t) {
  if (t)
    return t === "any" ? ["any"] : E(t);
}
const $e = /* @__PURE__ */ new Set([
  "command",
  "option",
  "control",
  "shift"
]);
function H(t) {
  return ue.test(t) || ce.test(t);
}
function Y(t) {
  const e = t.match(ue);
  if (e)
    return T("left", e[2]);
  const i = t.match(ce);
  if (i)
    return T("right", i[2]);
}
function Te(t) {
  return t.some(H);
}
function Oe(t) {
  return t.reduce(
    (e, i) => [
      ...e,
      ...H(i) ? Y(i) || [] : E(i) || []
    ],
    []
  );
}
function T(t, e) {
  var i;
  if (e)
    return (i = E(e)) == null ? void 0 : i.map(
      (o) => $e.has(o) ? `${t}_${o}` : o
    );
}
function Se(t) {
  return t in N ? N[t] : t;
}
function k(t) {
  return Array.isArray(t) ? t : [t];
}
function w(t, e = 1, i) {
  return new v({ type: "variable_if", name: t, value: e, description: i });
}
function Ct(t, e) {
  var o, n;
  let i;
  if (Array.isArray(t))
    i = t.map(x);
  else if (typeof t == "string" || t instanceof RegExp)
    i = [x(t)];
  else
    return new v({
      type: "frontmost_application_if",
      description: e,
      file_paths: (o = t.file_paths) == null ? void 0 : o.map(x),
      bundle_identifiers: (n = t.bundle_identifiers) == null ? void 0 : n.map(x)
    });
  return new v({
    type: "frontmost_application_if",
    description: e,
    bundle_identifiers: i
  });
}
function At(t, e) {
  return new v({
    type: "device_if",
    identifiers: k(t),
    description: e
  });
}
function Et(t, e) {
  return new v({
    type: "device_exists_if",
    identifiers: k(t),
    description: e
  });
}
function Kt(t, e) {
  return new v({
    type: "keyboard_type_if",
    keyboard_types: k(t),
    description: e
  });
}
function $t(t, e) {
  return new v({
    type: "input_source_if",
    input_sources: k(t),
    description: e
  });
}
function Tt(t = !0, e) {
  return new v({ type: "event_changed_if", value: t, description: e });
}
const je = Ve({
  frontmost_application_if: "frontmost_application_unless",
  device_if: "device_unless",
  device_exists_if: "device_exists_unless",
  keyboard_type_if: "keyboard_type_unless",
  input_source_if: "input_source_unless",
  variable_if: "variable_unless",
  event_changed_if: "event_changed_unless"
});
class v {
  constructor(e) {
    this.condition = e;
  }
  /** Switch type {condition}_if to {condition}_unless, and vice versa */
  unless() {
    return new v({
      ...this.condition,
      type: je[this.condition.type]
    });
  }
  build() {
    return { ...this.condition };
  }
}
function Pe(t) {
  return typeof t.build == "function";
}
function K(t) {
  return Pe(t) ? t.build() : t;
}
function x(t) {
  return typeof t == "string" ? t : t.toString().slice(1, -1);
}
function Ve(t) {
  return Object.keys(t).reduce(
    (e, i) => ({ ...e, [e[i]]: i }),
    t
  );
}
const De = ["optionalAny", "?any", "??"];
function Le(t) {
  return !t || typeof t != "string" ? !1 : De.includes(t);
}
function Ne(t) {
  return /^\?(left|l|<|‹|right|r|>|›)?([⌘⌥⌃⇧⇪]*)$/.test(t);
}
function b(t, e) {
  if (!t)
    return L(t, e);
  if (Le(t))
    return L("", "any");
  if (typeof t == "string") {
    if (Ne(t))
      return L(
        "",
        E(t.slice(1))
      );
    if (t.startsWith("?"))
      throw new Error(`${t} is not valid optional alias`);
  }
  return typeof t == "object" && "optional" in t ? L("", t.optional) : L(t, e);
}
function B(t, e, i) {
  if (typeof t == "object")
    return new j(t);
  const o = A(
    t,
    I,
    "for from.key_code"
  );
  return new j({
    key_code: o,
    modifiers: b(e, i)
  });
}
function Ot(t, e, i) {
  return new j({
    consumer_key_code: t,
    modifiers: b(e, i)
  });
}
function St(t, e, i) {
  return new j({
    pointing_button: t,
    modifiers: b(e, i)
  });
}
function m(t, e, i) {
  const o = A(
    t,
    F,
    "as to.key_code"
  );
  return {
    ...i,
    key_code: o,
    modifiers: e ? E(e) : void 0
  };
}
function Be(t) {
  return m("left_command", "⌥⌃⇧", t);
}
function Ie(t) {
  return m("left_option", "⌃⇧", t);
}
function qe(t) {
  return m("fn", "⌘⌥⌃⇧", t);
}
function Re(t) {
  return m("vk_none", void 0, t);
}
function xe(t, e, i) {
  return {
    ...i,
    consumer_key_code: t,
    modifiers: e ? E(e) : void 0
  };
}
function Ue(t, e, i) {
  return {
    ...i,
    pointing_button: t,
    modifiers: e ? E(e) : void 0
  };
}
function J(t) {
  return { shell_command: t };
}
function Fe(t) {
  const e = t.match(/^"?(.*?)(.app)?"?$/);
  return J(`open -a "${(e == null ? void 0 : e[1]) || t}".app`);
}
function He(t) {
  return J(`osascript -e '
set prev to the clipboard
set the clipboard to "${t}"
tell application "System Events"
  keystroke "v" using command down
  delay 0.1
end tell
set the clipboard to prev'`);
}
const Je = [
  "Tink",
  "Submarine",
  "Sosumi",
  "Morse",
  "Ping",
  "Pop",
  "Purr",
  "Glass",
  "Hero",
  "Frog",
  "Funk",
  "Blow",
  "Bottle",
  "Basso"
];
function jt(t) {
  const e = Je.includes(t) ? `/System/Library/Sounds/${t}.aiff` : t;
  return J(`afplay ${e}`);
}
function We(t) {
  return { select_input_source: t };
}
function p(t, e = 1, i, o) {
  return { set_variable: { name: t, value: e, key_up_value: i, type: o } };
}
function ze(t) {
  return { set_variable: { name: t, type: "unset" } };
}
function de(t, e) {
  return { set_notification_message: { id: t, text: e } };
}
function W(t) {
  return { set_notification_message: { id: t, text: "" } };
}
function Ge(t) {
  return { mouse_key: t };
}
function Qe(t, e = "toggle") {
  return { sticky_modifier: { [t]: e } };
}
function Xe(t) {
  return {
    software_function: { cg_event_double_click: { button: t } }
  };
}
function Ye(t) {
  return { software_function: { set_mouse_cursor_position: t } };
}
function Ze(t) {
  return {
    software_function: {
      iokit_power_management_sleep_system: { delay_milliseconds: t }
    }
  };
}
const S = {};
for (let t = 0; t <= 9; t++)
  S[t] = m(t);
const et = "abcdefghijklmnopqrstuvwxyz".split("");
for (const t of et)
  S[t] = m(t), S[t.toUpperCase()] = m(t, "⇧");
const tt = [
  ...Object.keys(ae),
  ...Object.keys(le)
];
for (const t of tt)
  S[t] = m(t);
const it = {
  1: "!",
  2: "@",
  3: "#",
  4: "$",
  5: "%",
  6: "^",
  7: "&",
  8: "*",
  9: "(",
  0: ")",
  "'": '"',
  "=": "+",
  ";": ":",
  ",": "<",
  ".": ">",
  "/": "?",
  "-": "_",
  "[": "{",
  "\\": "|",
  "]": "}",
  "`": "~"
};
for (const [t, e] of Object.entries(it))
  S[e] = m(t, "⇧");
function ot(t, e) {
  return t.split("").map((i) => {
    const o = (e == null ? void 0 : e[i]) || S[i];
    if (!o)
      throw new Error(
        `${i} is unknown. Please provide a map with { ${i}: {ToEvent} }`
      );
    return o;
  });
}
class j {
  constructor(e) {
    this.manipulator = { type: "basic", from: e };
  }
  /** The FromEvent of the Manipulator. */
  get from() {
    return this.manipulator.from;
  }
  to(e, i, o) {
    return this.addToEvent(
      typeof e == "object" ? e : m(e, i, o)
    ), this;
  }
  /** To Hyper key ⌘⌥⌃⇧ */
  toHyper(e) {
    return this.addToEvent(Be(e)), this;
  }
  /** To Meh key ⌥⌃⇧ */
  toMeh(e) {
    return this.addToEvent(Ie(e)), this;
  }
  /** To SuperHyper key ⌘⌥⌃⇧fn */
  toSuperHyper(e) {
    return this.addToEvent(qe(e)), this;
  }
  /** To vk_none (Disable this key) */
  toNone(e) {
    return this.addToEvent(Re(e)), this;
  }
  /** To { consumer_key_code } */
  toConsumerKey(e, i, o) {
    return this.addToEvent(xe(e, i, o)), this;
  }
  /** Map to mouse button */
  toPointingButton(e, i, o) {
    return this.addToEvent(Ue(e, i, o)), this;
  }
  /** Map to shell command */
  to$(e) {
    return this.addToEvent(J(e)), this;
  }
  /** Map to `$ open -a {app}.app` */
  toApp(e) {
    return this.addToEvent(Fe(e)), this;
  }
  /** Map to paste {text} via clipboard */
  toPaste(e) {
    return this.addToEvent(He(e)), this;
  }
  /** To change the current input source */
  toInputSource(e) {
    return this.addToEvent(We(e)), this;
  }
  /** Map to setting a variable */
  toVar(e, i = 1, o, n) {
    return this.addToEvent(p(e, i, o, n)), this;
  }
  /** Map to unsetting a variable */
  toUnsetVar(e) {
    return this.addToEvent(ze(e)), this;
  }
  /** To set or remove (set text to '') the notification message */
  toNotificationMessage(e, i) {
    return this.addToEvent(de(e, i)), this;
  }
  /** To remove the notification message */
  toRemoveNotificationMessage(e) {
    return this.addToEvent(W(e)), this;
  }
  /** Move mouse cursor by delta */
  toMouseKey(e) {
    return this.addToEvent(Ge(e)), this;
  }
  /** Changes to a sticky modifier key */
  toStickyModifier(e, i = "toggle") {
    return this.addToEvent(Qe(e, i)), this;
  }
  /** @see https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/software_function/cg_event_double_click/ */
  toCgEventDoubleClick(e) {
    return this.addToEvent(Xe(e)), this;
  }
  /** Set mouse cursor position */
  toMouseCursorPosition(e) {
    return this.addToEvent(Ye(e)), this;
  }
  /** To causes a system sleep */
  toSleepSystem(e) {
    return this.addToEvent(Ze(e)), this;
  }
  /** To type a string of keys */
  toTypeSequence(e, i) {
    return this.addToEvent(ot(e, i)), this;
  }
  toIfAlone(e, i, o) {
    return this.pushOrCreateList(
      this.manipulator,
      "to_if_alone",
      typeof e == "object" ? e : m(e, i, o)
    ), this;
  }
  toIfHeldDown(e, i, o) {
    return this.pushOrCreateList(
      this.manipulator,
      "to_if_held_down",
      typeof e == "object" ? e : m(e, i, o)
    ), this;
  }
  toAfterKeyUp(e, i, o) {
    return this.pushOrCreateList(
      this.manipulator,
      "to_after_key_up",
      typeof e == "object" ? e : m(e, i, o)
    ), this;
  }
  toDelayedAction(e, i) {
    const o = this.manipulator.to_delayed_action || {
      to_if_invoked: [],
      to_if_canceled: []
    };
    return k(e).forEach((n) => o.to_if_invoked.push(n)), k(i).forEach((n) => o.to_if_canceled.push(n)), this.manipulator.to_delayed_action = o, this;
  }
  description(e) {
    return this.manipulator.description = e, this;
  }
  condition(...e) {
    const { conditions: i = [] } = this.manipulator;
    return this.manipulator.conditions = [...i, ...e.map(K)], this;
  }
  parameters(e) {
    return this.manipulator.parameters = { ...this.manipulator.parameters, ...e }, this;
  }
  build(e) {
    return [{ ...this.manipulator }];
  }
  addToEvent(e) {
    this.pushOrCreateList(this.manipulator, "to", e);
  }
  pushOrCreateList(e, i, o) {
    const n = e[i] || [];
    k(o).forEach((r) => n.push(r)), Object.assign(e, { [i]: n });
  }
}
function nt(t) {
  return typeof t.build == "function";
}
function P(t, e) {
  return nt(t) ? t.build(e) : "type" in t ? [t] : Object.entries(t).reduce(
    (o, [n, r]) => [...o, ...B(n).to(r).build(e)],
    []
  );
}
function Pt(...t) {
  return (e) => {
    const i = t.map(K);
    function o(s) {
      return s.type !== "basic" ? s : {
        ...s,
        conditions: [...s.conditions || [], ...i]
      };
    }
    const r = (Array.isArray(e) ? e : P(e)).reduce(
      (s, u) => [...s, ...P(u).map(o)],
      []
    );
    return Object.assign(r, { build: () => r });
  };
}
function Vt(t) {
  return (e) => ({
    build: () => (Array.isArray(t) ? t.map((o, n) => [o, n]) : Object.entries(t)).reduce(
      (o, [n, r]) => [...o, ...P(e(n, r))],
      []
    )
  });
}
function Dt(t, e) {
  return (i) => ({
    build: (o) => {
      const n = b(
        t,
        e
      );
      return (Array.isArray(i) ? i : P(i)).map((s) => P(s, o)).reduce((s, u) => s.concat(u), []).map((s) => {
        var a;
        const u = Object.keys(n).reduce(
          (l, c) => {
            var d;
            if (!((d = n[c]) != null && d.length)) return l;
            const h = /* @__PURE__ */ new Set([
              ...l[c] || [],
              ...n[c]
            ]);
            return l[c] = h.has("any") ? ["any"] : Array.from(h), l;
          },
          { ...(a = s.from) == null ? void 0 : a.modifiers }
        );
        return s.from = { ...s.from, modifiers: u }, s;
      });
    }
  });
}
function rt(t, e, i) {
  const o = (r) => A(r, I, "for from.simultaneous"), n = new st({
    simultaneous: t.map(
      (r) => typeof r == "object" ? r : { key_code: o(r) }
    ),
    simultaneous_options: e
  });
  return i && n.parameters({
    "basic.simultaneous_threshold_milliseconds": i
  }), n;
}
class st extends j {
  constructor(e) {
    super(e);
  }
  modifiers(e, i) {
    return this.manipulator.from.modifiers = e || i ? b(e, i) : void 0, this;
  }
}
const oe = {
  "double_tap.delay_milliseconds": 200
};
function Lt(t, e, i, o) {
  const n = A(
    t,
    [...F, ...I],
    "for double tap"
  ), r = new at({ key_code: n });
  return o ? (r.delay(o), r.from.modifiers = b(
    e,
    i
  )) : i ? typeof i == "number" ? (r.delay(i), r.from.modifiers = b(
    e
  )) : r.from.modifiers = b(
    e,
    i
  ) : e && (typeof e == "number" ? r.delay(e) : r.from.modifiers = b(
    e
  )), r;
}
class at extends j {
  constructor(e) {
    super(e), this.singleTapEvent = void 0;
  }
  /** Set single tap which is from key by default; null to disable */
  singleTap(e) {
    return this.singleTapEvent = e, this;
  }
  /** Set the delay parameter */
  delay(e) {
    return this.delayParam = e, this;
  }
  build(e) {
    var h;
    const i = (e == null ? void 0 : e.getParameters(oe)) ?? oe, o = this.delayParam || i["double_tap.delay_milliseconds"], n = this.from.key_code;
    if (this.singleTapEvent === void 0) {
      this.singleTapEvent = { key_code: n };
      const d = (h = this.manipulator.from.modifiers) == null ? void 0 : h.mandatory;
      d && (this.singleTapEvent.modifiers = d.filter(
        (y) => y !== "any"
      ));
    }
    const r = ["double-tap", n];
    this.from.modifiers && [this.from.modifiers.mandatory, this.from.modifiers.optional].map((d) => d != null && d.length ? d.join(",") : "").forEach((d) => d && r.push(d));
    const s = r.join("-"), u = w(s).build(), a = w(s).unless().build(), l = {
      ...this.manipulator,
      conditions: [...this.manipulator.conditions || [], u]
    }, c = {
      ...this.manipulator,
      to: [p(s, 1)],
      conditions: [a],
      to_delayed_action: {
        to_if_invoked: [
          ...this.singleTapEvent ? [this.singleTapEvent] : [],
          p(s, 0)
        ],
        to_if_canceled: [p(s, 0)]
      }
    };
    return c.parameters = {
      "basic.to_delayed_action_delay_milliseconds": o
    }, [l, c];
  }
}
function Nt() {
  return new lt();
}
class lt {
  constructor() {
    this.manipulator = {
      type: "mouse_motion_to_scroll"
    };
  }
  modifiers(e, i) {
    return this.manipulator.from = {
      modifiers: b(
        e,
        i
      )
    }, this;
  }
  condition(...e) {
    const { conditions: i = [] } = this.manipulator;
    return this.manipulator.conditions = [...i, ...e.map(K)], this;
  }
  options(e) {
    return this.manipulator.options = { ...this.manipulator.options, ...e }, this;
  }
  build(e) {
    return [{ ...this.manipulator }];
  }
}
function Bt(t, ...e) {
  return new z(t, ...e);
}
class z {
  constructor(e, ...i) {
    this.ruleDescription = e, this.manipulatorSources = [], this.allowEmptyManipulators = !1, this.conditions = i;
  }
  manipulators(e) {
    return Array.isArray(e) ? e.forEach((i) => this.manipulatorSources.push(i)) : this.manipulatorSources.push(e), this;
  }
  condition(...e) {
    return e.forEach((i) => this.conditions.push(i)), this;
  }
  description(e) {
    return this.ruleDescription = e, this;
  }
  build(e) {
    const i = {
      description: this.ruleDescription,
      manipulators: this.manipulatorSources.reduce(
        (n, r) => [...n, ...P(r, e)],
        []
      )
    };
    if (!this.allowEmptyManipulators && i.manipulators.length === 0)
      throw new Error(`"manipulators" is empty in "${i.description}"`);
    if (this.conditions.length === 0) return i;
    const o = this.conditions.map(K);
    return i.manipulators = i.manipulators.map(
      (n) => n.type === "basic" ? { ...n, conditions: [...n.conditions || [], ...o] } : { ...n }
    ), i;
  }
}
function ut(t) {
  return typeof t.build == "function";
}
function ct(t, e) {
  return ut(t) ? t.build(e) : t;
}
const U = {
  escape: ["escape", "caps_lock"]
};
function _e(t, e, i) {
  const o = [];
  if (!t) return o;
  for (const n of Array.isArray(t) ? t : [t]) {
    const r = B(n);
    o.push(...r.condition(e).to(i).build());
  }
  return o;
}
const Q = [
  ...I,
  ...F,
  ...X
];
function dt(t, e, i = 1, o = 0) {
  return new ft(t, e, i, o);
}
function _t(t, e, i, o = 1, n = 0) {
  return dt(e, i, o, n).modifiers(t);
}
function It(t, e, i = 1, o = 0) {
  return _t("Hyper", t, e, i, o);
}
class ft extends z {
  constructor(e, i, o = 1, n = 0) {
    const r = k(e).map(
      (s) => A(s, Q, "as layer key")
    );
    i || (i = `layer-${r.join("-")}`), super(`Layer - ${i}`), this.onValue = o, this.offValue = n, this.replaceLayerKeyToIfAlone = !1, this.keys = r, this.varName = i, this.layerCondition = w(this.varName, this.onValue), this.condition(this.layerCondition), this.allowEmptyManipulators = !0;
  }
  modifiers(e, i) {
    return this.layerModifiers = e || i ? b(e, i) : void 0, this;
  }
  /** Config the layer key. */
  configKey(e, i = !1) {
    return this.layerKeyManipulator || (this.layerKeyManipulator = B("fn")), e(this.layerKeyManipulator), this.replaceLayerKeyToIfAlone = i, this;
  }
  /** Set the notification when the layer is active. */
  notification(e = !0) {
    return this.layerNotification = e, this;
  }
  /** Set leader mode. Default escape keys: ['escape', 'caps_lock']. */
  leaderMode(e = !0) {
    return e === !0 ? this.leaderModeOptions = U : e ? this.leaderModeOptions = { ...U, ...e } : this.leaderModeOptions = void 0, this;
  }
  build(e) {
    var n, r, s, u;
    const i = super.build(e);
    if (this.leaderModeOptions) {
      const a = [p(this.varName, this.offValue)];
      this.layerNotification && a.push(W(pe(this.varName))), this.leaderModeOptions.sticky || i.manipulators.forEach(
        (l) => l.type === "basic" && (l.to = (l.to || []).concat(a))
      ), i.manipulators.push(
        ..._e(
          this.leaderModeOptions.escape,
          w(this.varName, this.onValue),
          a
        )
      );
    }
    if ((r = (n = this.layerModifiers) == null ? void 0 : n.mandatory) != null && r.length || (u = (s = this.layerModifiers) == null ? void 0 : s.optional) != null && u.length) {
      const a = ne(this.layerModifiers) === "optional";
      i.manipulators.forEach(
        (l) => this.addModifierAnyToManipulator(l, a)
      );
    }
    const o = this.conditions.filter((a) => a !== this.layerCondition).map(K);
    for (const a of this.keys)
      i.manipulators = [
        ...fe(
          a,
          this.varName,
          this.onValue,
          this.offValue,
          this.layerModifiers,
          o,
          e,
          this.layerKeyManipulator,
          this.replaceLayerKeyToIfAlone,
          this.layerNotification === !0 ? this.ruleDescription : this.layerNotification || void 0,
          this.leaderModeOptions
        ),
        ...i.manipulators
      ];
    return i;
  }
  // If the layer has modifiers, set manipulator modifiers to { mandatory: ['any'] }
  addModifierAnyToManipulator(e, i) {
    if (e.type === "basic") {
      if (e.from.modifiers) {
        const { mandatory: o, optional: n } = e.from.modifiers;
        if (n != null && n.length || o != null && o.length) {
          const r = ne(e.from.modifiers);
          if (r === "mandatory")
            e.from.modifiers = { mandatory: ["any"] };
          else if (r === "optional")
            e.from.modifiers = { optional: ["any"] };
          else
            throw new Error(
              "Layers with modifiers cannot have modifiers on manipulators"
            );
          return;
        }
      }
      e.from.modifiers = i ? { optional: ["any"] } : { mandatory: ["any"] };
    }
  }
}
function fe(t, e, i, o, n, r, s, u, a, l, c) {
  var _;
  function h(f) {
    var Z;
    if (!u) return f;
    const $ = u.build()[0], C = k(f)[0];
    if ([
      "to",
      "to_if_alone",
      "to_if_held_down",
      "to_after_key_up"
    ].forEach(
      (M) => {
        var q;
        return (q = $[M]) == null ? void 0 : q.forEach(
          (R) => C[M] = [...C[M] || [], R]
        );
      }
    ), $.to_delayed_action) {
      C.to_delayed_action = C.to_delayed_action || {
        to_if_invoked: [],
        to_if_canceled: []
      };
      for (const M of ["to_if_invoked", "to_if_canceled"])
        $.to_delayed_action[M].forEach(
          (q) => {
            var R;
            return (R = C.to_delayed_action) == null ? void 0 : R[M].push(q);
          }
        );
    }
    return a && (C.to_if_alone = (Z = C.to_if_alone) == null ? void 0 : Z.filter(
      (M) => !("key_code" in M && M.key_code === t)
    )), f;
  }
  const d = "__layer", y = B({ key_code: t, modifiers: n }).toVar(e, i).toVar(d).condition(w(e, i).unless(), w(d).unless());
  if (!((_ = n == null ? void 0 : n.mandatory) != null && _.length) && !c && y.toIfAlone({ key_code: t }), c || y.toAfterKeyUp(p(e, o)).toAfterKeyUp(p(d, 0)), r != null && r.length && y.condition(...r), l) {
    const f = pe(e);
    y.toNotificationMessage(f, l), c || y.toAfterKeyUp(W(f));
  }
  if (!s)
    return h(y.build());
  const V = [
    `layer_${t}`,
    ...n ? [JSON.stringify(n)] : [],
    ...(r || []).map((f) => JSON.stringify(f)).sort()
  ].join("_"), g = s.getCache(V);
  if (g != null && g.to && g.to_after_key_up)
    return g.to.find(
      ($) => "set_variable" in $ && $.set_variable.name === e
    ) || (g.to.push(p(e, i)), g.to_after_key_up.push(p(e, o))), h(g), [];
  const D = y.build(s);
  return s.setCache(V, D[0]), h(D);
}
function ne({
  mandatory: t,
  optional: e
}) {
  return (t == null ? void 0 : t.length) === 1 && t[0] === "any" ? "mandatory" : (e == null ? void 0 : e.length) === 1 && e[0] === "any" ? "optional" : null;
}
function pe(t) {
  return `layer-${t}`;
}
const re = {
  "simlayer.threshold_milliseconds": 200
};
function qt(t, e, i, o = 1, n = 0) {
  return new pt(t, e, i, o, n);
}
class pt extends z {
  constructor(e, i, o, n = 1, r = 0) {
    const s = k(e).map(
      (u) => A(u, Q, "as simlayer key")
    );
    i || (i = `simlayer-${s.join("-")}`), super(`Simlayer - ${i}`), this.threshold = o, this.onValue = n, this.offValue = r, this.sharedLayerKeys = [], this.simultaneousOptions = {
      detect_key_down_uninterruptedly: !0,
      key_down_order: "strict",
      key_up_order: "strict_inverse",
      key_up_when: "any"
    }, this.layerModifiers = { optional: ["any"] }, this.ifActivated = [], this.ifDeactivated = [], this.keys = s, this.varName = i, this.layerCondition = w(this.varName, this.onValue), this.condition(this.layerCondition);
  }
  modifiers(e, i) {
    return this.layerModifiers = e || i ? b(e, i) : void 0, this;
  }
  /** Set simultaneous_options on the simlayer toggle manipulator */
  options(e) {
    return Object.assign(this.simultaneousOptions, e), this;
  }
  /** Enable layer with the same variable and manipulators with this simlayer */
  enableLayer(...e) {
    return e.map(
      (i) => A(i, Q, "as layer key")
    ).forEach((i) => {
      if (this.keys.includes(i))
        throw new Error(`Key ${i} is already used in ${this.ruleDescription}`);
      if (this.sharedLayerKeys.includes(i))
        throw new Error(
          `Key ${i} is already used as shared layer key in  ${this.ruleDescription}`
        );
      this.sharedLayerKeys.push(i);
    }), this;
  }
  /** The ToEvents to trigger when the layer is activated */
  toIfActivated(e) {
    return this.ifActivated.push(e), this;
  }
  /** The ToEvents to trigger when the layer is deactivated */
  toIfDeactivated(e) {
    return this.ifDeactivated.push(e), this;
  }
  build(e) {
    const i = super.build(e), o = (e == null ? void 0 : e.getParameters(re)) ?? re, n = this.threshold || o["simlayer.threshold_milliseconds"], r = this.conditions.length > 1 ? this.conditions.filter((a) => a !== this.layerCondition).map(K) : void 0, s = p(this.varName, this.onValue), u = p(this.varName, this.offValue);
    i.manipulators.concat().forEach((a) => {
      var c;
      if (a.type !== "basic")
        throw new Error(
          `Unsupported manipulator type ${a.type} in simlayer ${this.ruleDescription}`
        );
      const l = (c = a.from) == null ? void 0 : c.key_code;
      if (!l)
        throw new Error(
          `Missing from.key_code in simlayer ${this.ruleDescription}`
        );
      this.layerModifiers && (a.from.modifiers = {
        ...a.from.modifiers,
        ...this.layerModifiers
      });
      for (const h of this.keys)
        i.manipulators.push({
          type: "basic",
          parameters: {
            "basic.simultaneous_threshold_milliseconds": n
          },
          to: [s, ...a.to || [], ...this.ifActivated],
          from: {
            simultaneous: [{ key_code: h }, { key_code: l }],
            simultaneous_options: {
              ...this.simultaneousOptions,
              to_after_key_up: [
                ...this.simultaneousOptions.to_after_key_up || [],
                u,
                ...this.ifDeactivated
              ]
            },
            modifiers: this.layerModifiers
          },
          conditions: r
        });
    });
    for (const a of this.sharedLayerKeys)
      i.manipulators = [
        ...fe(
          a,
          this.varName,
          this.onValue,
          this.offValue,
          this.layerModifiers,
          r,
          e
        ),
        ...i.manipulators
      ];
    return i;
  }
}
const se = {
  "duo_layer.threshold_milliseconds": 200,
  "duo_layer.notification": !1
};
function Rt(t, e, i, o = 1, n = 0) {
  return new ht(t, e, i, o, n);
}
class ht extends z {
  constructor(e, i, o, n = 1, r = 0) {
    const s = `DuoLayer ${o || `${e} ${i}`}`;
    o || (o = `duo-layer-${e}-${i}`), super(s), this.key1 = e, this.key2 = i, this.onValue = n, this.offValue = r, this.simultaneousOptions = {}, this.ifActivated = [], this.ifDeactivated = [], this.varName = o, this.layerCondition = w(this.varName, this.onValue), this.condition(this.layerCondition), this.allowEmptyManipulators = !0;
  }
  threshold(e) {
    return this.simultaneousThreshold = e, this;
  }
  options(e) {
    return Object.assign(this.simultaneousOptions, e), this;
  }
  /** Set the notification when the layer is active. */
  notification(e = !0) {
    return this.layerNotification = e, this;
  }
  /** The ToEvents to trigger when the layer is activated */
  toIfActivated(e) {
    return this.ifActivated.push(e), this;
  }
  /** The ToEvents to trigger when the layer is deactivated */
  toIfDeactivated(e) {
    return this.ifDeactivated.push(e), this;
  }
  /** Set leader mode. Default escape keys: ['escape', 'caps_lock']. */
  leaderMode(e = !0) {
    return e === !0 ? this.leaderModeOptions = U : e ? this.leaderModeOptions = { ...U, ...e } : this.leaderModeOptions = void 0, this;
  }
  build(e) {
    var y, V, g, D;
    const i = super.build(e), o = (e == null ? void 0 : e.getParameters(se)) ?? se, n = this.simultaneousThreshold || o["duo_layer.threshold_milliseconds"], r = this.layerNotification ?? o["duo_layer.notification"], s = this.conditions.filter((_) => _ !== this.layerCondition).map(K), u = [p(this.varName, this.onValue), ...this.ifActivated], a = [
      p(this.varName, this.offValue),
      ...this.ifDeactivated
    ];
    if (r) {
      const _ = `duo-layer-${this.varName}`, f = r === !0 ? this.ruleDescription : r;
      u.push(de(_, f)), a.push(W(_));
    }
    this.leaderModeOptions && (this.leaderModeOptions.sticky || i.manipulators.forEach(
      (_) => _.type === "basic" && (_.to = (_.to || []).concat(a))
    ), i.manipulators.push(
      ..._e(
        this.leaderModeOptions.escape,
        w(this.varName, this.onValue),
        a
      )
    ));
    const l = this.simultaneousOptions.to_after_key_up || [];
    this.leaderModeOptions || l.push(...a);
    const c = rt(
      [this.key1, this.key2],
      {
        ...this.simultaneousOptions,
        to_after_key_up: l
      },
      n
    ).modifiers("??").to(u).condition(w(this.varName, this.onValue).unless());
    if (s.length && c.condition(...s), !e)
      return i.manipulators = [...c.build(), ...i.manipulators], i;
    const h = [
      `duo_layer_${this.key1}_${this.key2}`,
      ...s.map((_) => JSON.stringify(_)).sort()
    ].join("_"), d = e.getCache(h);
    if (d)
      ((y = d.to) == null ? void 0 : y.find(
        (f) => "set_variable" in f && f.set_variable.name === this.varName
      )) || ((V = d.to) == null || V.push(p(this.varName, this.onValue)), (D = (g = d.from.simultaneous_options) == null ? void 0 : g.to_after_key_up) == null || D.push(
        p(this.varName, this.offValue)
      ));
    else {
      const _ = c.build(e)[0];
      e.setCache(h, _), i.manipulators = [_, ...i.manipulators];
    }
    return i;
  }
}
class mt {
  constructor() {
    this.parameters = {}, this.cache = /* @__PURE__ */ new Map();
  }
  setParameters(e) {
    Object.assign(this.parameters, e);
  }
  getParameters(e) {
    const i = { ...e };
    for (const o of Object.keys(e))
      o in this.parameters && this.parameters[o] !== void 0 && Object.assign(i, { [o]: this.parameters[o] });
    return i;
  }
  getCache(e) {
    return this.cache.get(e);
  }
  setCache(e, i) {
    this.cache.set(e, i);
  }
}
const yt = {
  "basic.to_if_alone_timeout_milliseconds": 1e3,
  "basic.to_if_held_down_threshold_milliseconds": 500,
  "basic.to_delayed_action_delay_milliseconds": 500,
  "basic.simultaneous_threshold_milliseconds": 50,
  "mouse_motion_to_scroll.speed": 100
};
function bt(t, e = {}) {
  const {
    "double_tap.delay_milliseconds": i,
    "simlayer.threshold_milliseconds": o,
    "duo_layer.threshold_milliseconds": n,
    "duo_layer.notification": r,
    ...s
  } = e, u = new mt();
  u.setParameters({
    "double_tap.delay_milliseconds": i
  }), u.setParameters({
    "simlayer.threshold_milliseconds": o
  }), u.setParameters({
    "duo_layer.threshold_milliseconds": n,
    "duo_layer.notification": r
  });
  const a = t.map((c) => ct(c, u)), l = {
    rules: a.filter((c) => c.manipulators.length),
    parameters: {
      ...yt,
      ...s
    }
  };
  if (l.rules.length === 0)
    throw new Error('complex_modifications "rules" is empty ');
  return l.rules.length < a.length && console.warn(`Rules with empty manipulators are ignored: 
${a.filter((c) => c.manipulators.length === 0).map((c) => "- " + c.description).join(`
`)}
`), l;
}
const O = {
  karabinerConfigDir() {
    return require("node:path").join(
      require("node:os").homedir(),
      ".config/karabiner"
    );
  },
  karabinerConfigFile() {
    return require("node:path").join(
      this.karabinerConfigDir(),
      "karabiner.json"
    );
  },
  readKarabinerConfig(t) {
    return require(t ?? this.karabinerConfigFile());
  },
  writeKarabinerConfig(t, e) {
    return require("node:fs/promises").writeFile(
      e ?? this.karabinerConfigFile(),
      t
    );
  },
  readJson(t) {
    return require(t);
  },
  exit(t = 0) {
    process.exit(t);
  }
};
function xt(t, e, i = {}) {
  typeof t == "string" && (t = { name: t, dryRun: t === "--dry-run" });
  const { name: o, dryRun: n } = t, r = t.karabinerJsonPath ?? O.karabinerConfigFile(), s = n ? { profiles: [{ name: o, complex_modifications: { rules: [] } }] } : O.readKarabinerConfig(r), u = s == null ? void 0 : s.profiles.find((l) => l.name === o);
  u || G(`⚠️ Profile ${o} not found in ${r}.

ℹ️ Please check the profile name in the Karabiner-Elements UI and 
    - Update the profile name at writeToProfile()
    - Create a new profile if needed
 `);
  try {
    u.complex_modifications = bt(e, i);
  } catch (l) {
    G(l);
  }
  const a = JSON.stringify(s, null, 2);
  if (n) {
    console.info(a);
    return;
  }
  O.writeKarabinerConfig(a, r).catch(G), console.log(`✓ Profile ${o} updated.`);
}
function G(t) {
  return t && console.error(typeof t == "string" ? t : t.message || t), O.exit(1);
}
function Ut(t) {
  return {
    build() {
      const e = O.readJson(t);
      if (!Array.isArray(e == null ? void 0 : e.rules))
        throw new Error(`Cannot file rules in ${t}`);
      return {
        description: `Imported from ${t}`,
        manipulators: e.rules.reduce(
          (i, o) => i.concat(o.manipulators),
          []
        )
      };
    }
  };
}
function Ft(t, e) {
  return {
    build() {
      const o = O.readKarabinerConfig(e).profiles.find((n) => n.name === t);
      if (!o) throw new Error(`Profile ${t} not found`);
      return {
        description: `Imported from profile ${t}`,
        manipulators: o.complex_modifications.rules.reduce(
          (n, r) => n.concat(r.manipulators),
          []
        )
      };
    }
  };
}
export {
  v as ConditionBuilder,
  ae as arrowKeyAliases,
  ye as arrowKeyCodes,
  K as buildCondition,
  bt as complexModifications,
  le as controlOrSymbolKeyAliases,
  me as controlOrSymbolKeyCodes,
  yt as defaultComplexModificationsParameters,
  oe as defaultDoubleTapParameters,
  se as defaultDuoLayerParameters,
  re as defaultSimlayerParameters,
  Rt as duoLayer,
  kt as fromAndToConsumerKeyCodes,
  wt as fromOnlyConsumerKeyCodes,
  F as fromOnlyKeyCodes,
  ke as functionKeyCodes,
  A as getKeyWithAlias,
  It as hyperLayer,
  Ct as ifApp,
  At as ifDevice,
  Et as ifDeviceExists,
  Tt as ifEventChanged,
  $t as ifInputSource,
  Kt as ifKeyboardType,
  w as ifVar,
  Ut as importJson,
  Ft as importProfile,
  Me as internationalKeyCodes,
  Pe as isConditionBuilder,
  H as isSideMultiModifierAlias,
  Ce as japaneseKeyCodes,
  we as keypadKeyCodes,
  dt as layer,
  be as letterKeyCodes,
  B as map,
  Ot as mapConsumerKey,
  Lt as mapDoubleTap,
  St as mapPointingButton,
  rt as mapSimultaneous,
  N as modifierKeyAliases,
  he as modifierKeyCodes,
  _t as modifierLayer,
  Nt as mouseMotionToScroll,
  te as multiModifierAliases,
  Ke as namedMultiModifierAliases,
  ge as numberKeyCodes,
  Ae as otherKeyCodes,
  L as parseFromModifierParams,
  E as parseModifierParam,
  Y as parseSideMultiModifierAlias,
  ve as pcKeyboardKeyCodes,
  Mt as pointingButtons,
  Bt as rule,
  qt as simlayer,
  X as stickyModifierKeyCodes,
  Je as systemSounds,
  J as to$,
  Fe as toApp,
  Xe as toCgEventDoubleClick,
  xe as toConsumerKey,
  Be as toHyper,
  We as toInputSource,
  m as toKey,
  Ie as toMeh,
  Ye as toMouseCursorPosition,
  Ge as toMouseKey,
  Re as toNone,
  de as toNotificationMessage,
  vt as toOnlyConsumerKeyCodes,
  I as toOnlyKeyCodes,
  He as toPaste,
  jt as toPlaySound,
  Ue as toPointingButton,
  W as toRemoveNotificationMessage,
  p as toSetVar,
  Ze as toSleepSystem,
  Qe as toStickyModifier,
  qe as toSuperHyper,
  ot as toTypeSequence,
  ze as toUnsetVar,
  Pt as withCondition,
  Vt as withMapper,
  Dt as withModifier,
  xt as writeToProfile
};
